group = "com.viridian.flutter_hce"
version = "1.0-SNAPSHOT"

buildscript {
    ext.kotlin_version = "1.8.22"
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:8.1.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

android {
    namespace "com.viridian.flutter_hce"
    
    compileSdkVersion 34
    
    defaultConfig {
        minSdkVersion 21
        consumerProguardFiles "consumer-rules.pro"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    
    kotlinOptions {
        jvmTarget = '1.8'
    }

    // Disable lint for now to focus on LSP
    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
    }
}

repositories {
    google()
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    
    // Flutter embedding API - using a direct path that should work
    def localProperties = new Properties()
    def localPropertiesFile = rootProject.file("local.properties")
    if (localPropertiesFile.exists()) {
        localPropertiesFile.withReader("UTF-8") { reader -> localProperties.load(reader) }
    }
    def flutterSdkPath = localProperties.getProperty("flutter.sdk")
    
    if (flutterSdkPath != null) {
        // Try different possible paths for Flutter embedding
        def possiblePaths = [
            "${flutterSdkPath}/bin/cache/artifacts/engine/android-arm64/flutter.jar",
            "${flutterSdkPath}/bin/cache/artifacts/engine/android-x64/flutter.jar", 
            "${flutterSdkPath}/bin/cache/artifacts/engine/android-arm/flutter.jar"
        ]
        
        def flutterJarFound = false
        for (path in possiblePaths) {
            if (file(path).exists()) {
                // Use both compileOnly and implementation for better LSP support
                compileOnly files(path)
                // Also add as provided for better IDE integration
                configurations.maybeCreate('provided')
                dependencies.add('provided', files(path))
                println "Using Flutter embedding from: $path"
                flutterJarFound = true
                break
            }
        }
        
        if (!flutterJarFound) {
            println "Warning: No Flutter JAR found in standard locations"
        }
    } else {
        println "Warning: Flutter SDK path not found, LSP might not work correctly"
    }
}
